#!/usr/bin/env ruby

=begin rdoc

= rbot main executable

Usage:

  % rbot [options] [config directory]

== Options

[-h, --help]
    display a help message and exit
[-v, --version]
    display version information and exit
[-d, --debug]
    enable debug messages
[-l, --loglevel _level_]
    sets the minimum log level verbosity
[-b, --background]
    background (daemonize) the bot
[-p, --pidfile _filename_]
    write the bot pid to _filename_

The default config directory is <tt>~/.rbot</tt>.

The default pidfile is <tt><i>botdir</i>/rbot.pid</tt>.

The logfile is located at <tt><i>botdir</i>/<i>botname</i>.log</tt>, and
the default loglevel is 1 (INFO messages). Possible values for the loglevel
are 0 (DEBUG), 1 (INFO), 2 (WARN), 3 (ERROR), 4 (FATAL).

Please note that the logfile doesn't contain IRC logs (which are located at
<tt><i>botdir</i>/logs/*</tt>, but only rbot diagnostic messages.

=end

# Copyright (C) 2002 Tom Gilbert.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies of the Software and its documentation and acknowledgment shall be
# given in the documentation and software packages that this Software was
# used.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# Most of the string processing across rbot is done against IRC messages, which
# do not have a well-defined encoding. Although many clients are now using
# UTF-8, there is no guarantee that an arbitrary string received from IRC will
# be UTF-8 encoded. We have to force ASCII (byte-wise/charset agnostic)
# matching because otherwise some strings can give problems: in particular, for
# example, the bytesequence "\340\350\354\362\371" (that is the aeiou vowels,
# each with a grave accent) will cause the string to be considered up to the
# "\354" (i with grave accent) only: so either the rest of the message is
# ignored, or the matching fails.
$KCODE = 'a'

$VERBOSE=true

require 'etc'
require 'getoptlong'
require 'fileutils'

$version="0.9.11-git"
$opts = Hash.new

if $version =~ /git/
  if defined?(SCM_DIR) and File.exists?(File.join(SCM_DIR, '.git'))
    git_out = `git status`

    git_out.match(/^# On branch (.*)\n/)
    if $1 # git 1.5.x
      branch = $1.dup || "unknown"
      changed = git_out.match(/^# Change(.*)\n/)
      rev = "revision "
      git_out = `git log -1 --pretty=format:"%h%n%b"`.split("\n")
      rev << git_out.first
      if git_out.last.match(/^git-svn-id: \S+@(\d+)/)
        rev << "(svn #{$1})"
      end
      rev << ", local changes" if changed
    else # older gits
      git_out = `git branch`
      git_out.match(/^\* (.*)\n/)
      branch = $1.dup rescue "unknown"
      rev = "revision " + `git rev-parse HEAD`[0,6]
    end

    $version << " (#{branch} branch, #{rev})"
  else
    up = File.dirname(__FILE__) + "/.."
    rev = " (unknown revision)"
    begin
      svn_out = `svn info #{up}`
      if svn_out =~ /Last Changed Rev: (\d+)/
        rev = " (revision #{$1}"
      end
      svn_st = `svn st #{up}`
      if svn_st =~ /^[MDA] /
        rev << ", local changes"
      end
      rev << ")"
    rescue => e
      puts e.inspect
    end
    $version += rev
  end
end

orig_opts = ARGV.dup

opts = GetoptLong.new(
  ["--background", "-b", GetoptLong::NO_ARGUMENT],
  ["--debug", "-d", GetoptLong::NO_ARGUMENT],
  ["--help",  "-h", GetoptLong::NO_ARGUMENT],
  ["--loglevel",  "-l", GetoptLong::REQUIRED_ARGUMENT],
  ["--trace",  "-t", GetoptLong::REQUIRED_ARGUMENT],
  ["--pidfile", "-p", GetoptLong::REQUIRED_ARGUMENT],
  ["--version", "-v", GetoptLong::NO_ARGUMENT]
)

$debug = $DEBUG
$daemonize = false

opts.each {|opt, arg|
  $debug = true if(opt == "--debug")
  $daemonize = true if(opt == "--background")
  $opts[opt.sub(/^-+/, "")] = arg
}

$cl_loglevel = $opts["loglevel"].to_i if $opts["loglevel"]

if ($opts["trace"])
  set_trace_func proc { |event, file, line, id, binding, classname|
    if classname.to_s == $opts["trace"]
      printf "TRACE: %8s %s:%-2d %10s %8s\n", event, File.basename(file), line, id, classname
    end
  }
end

defaultlib = File.expand_path(File.dirname($0) + '/../lib')

if File.directory? "#{defaultlib}/rbot"
  unless $:.include? defaultlib
    $:.unshift defaultlib
  end
end
  
begin
  require 'rbot/ircbot'
rescue LoadError => e
  puts "Error: couldn't find the rbot/ircbot module (or one of its dependencies)\n"
  puts e
  exit 2
end

if ($opts["version"])
  puts "rbot #{$version}"
  exit 0
end

if ($opts["help"])
  puts "usage: rbot [options] [config directory]"
  puts "  -h, --help         this message"
  puts "  -v, --version      version information"
  puts "  -d, --debug        enable debug messages"
  puts "  -l, --loglevel     sets the log level verbosity"
  puts "  -b, --background   background (daemonize) the bot"
  puts "  -p, --pidfile      write the bot pid to file"
  puts "config directory defaults to ~/.rbot"
  exit 0
end

if(bot = Irc::Bot.new(ARGV.shift, :argv => orig_opts))
  # just run the bot
  bot.mainloop
end

